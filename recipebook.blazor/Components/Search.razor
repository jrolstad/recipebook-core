@using Models;
@using Services; 
@using System.Linq;
 
@inject CategoryService CategoryService
@inject RecipeService RecipeService
@inject AppState AppState 

<div class="form-inline">
    <input class="form-control mr-sm-4" type="search" placeholder="Search" aria-label="Search" @bind="SearchText" disabled="@IsWorking">
    <select class="form-control mr-sm-3" id="categories" @bind="Category" disabled="@IsWorking">
        <option>Category</option>
        @foreach (var item in Categories)
        {
            <option>@item.Name</option>
        }
    </select>
    <button class="btn btn-light" disabled="@IsWorking" @onclick="SearchAsync">Search</button>
</div>

@code {
    public List<Category> Categories { get; set; } = new List<Category>();
    public string SearchText { get; set; }
    public string Category { get; set; }
    public bool IsWorking { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        var data = await CategoryService.GetCategories();
        Categories = data
            .OrderBy(c=>c.Name)
            .ToList();

        await base.OnInitializedAsync();
    }

    public async Task SearchAsync()
    {
        try
        {
            IsWorking = true;
            var data = await RecipeService.Search(this.SearchText, this.Category);

            AppState.SearchResults = data
                .OrderBy(r => r.Name)
                .ToList();

            AppState.SearchError = null;
        }
        catch (Exception ex)
        {
            AppState.SearchError = "Error when searching";
        }
        finally
        {
            IsWorking = false;
        }


    }
}
